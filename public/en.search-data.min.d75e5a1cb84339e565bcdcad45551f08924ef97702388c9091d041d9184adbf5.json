[{"id":0,"href":"/docs/resources/guides/dfab-intro/","title":"A Gentle Introduction to Digital Fabrication","section":"Resources","content":" A Gentle Introduction to Digital Fabrication # This page provides a brief introduction to some key concepts in digital fabrication. It is by no means exhaustive, but provides helpful background information for newcomers to digital fabrication machines. If you’re already familiar with computer-controlled machines but want to learn a bit about creative coding, check out the creative coding intro, or if you want to learn how to make things with p5.fab, jump ahead to the primer.\nThe ABCs of CAD, CAM, \u0026amp; CNC # Digital fabrication is the process of using computer-controlled machines to create physical objects. This process might be additive (e.g. 3D printing), subtractive (e.g. milling, laser cutting), or something else entirely (e.g. using a liquid handling robot for science experiments). Typically, we would follow the following steps to make an object:\nDesign a model. Using computer-aided design (CAD) software, we first need to design the object we want to make. There are lots of different CAD softwares; popular options include Rhino, Fusion360, FreeCAD, and TinkerCAD. There are also websites where makers can share premade models, like Thingiverse for 3D printing. Choose fabrication settings. Computer-aided manufacturing (CAM) software is used to plan the machines toolpaths\u0026ndash;or the path the machine will take as it moves through space\u0026ndash;based on the model. For 3D printing, this is called the \u0026lsquo;slicer\u0026rsquo; since the model is divided into a series of flat, 2D contours which are stacked vertically. In the CAM software, we can choose a bunch of different settings depending on the machine we\u0026rsquo;re using. For a 3D printer we can set how fast the machine should move and at what temperature should be set to melt the plastic; for a laser cutter, we can set the power of the laser. Run the machine. The CAM software will generate instructions for the computer-numeric control (CNC) machine. This process is incredibly powerful for a lot of use cases! There are a some drawbacks, though, which motivate the design of p5.fab. It\u0026rsquo;s hard to experiment creatively with different settings, since existing software assumes you want to precicely replicate the same thing many times. If you want to change a model, you need to return back to your CAD software and start again. And it requires owning and learning CAD software. p5.fab tries to offer an alternate entry point into digital fabrication by way of creative coding, integrating toolpath design and machine execution into a single environment.\nG-Code # G-Code (or ‘geometry code’) is the standard language used by CNC machines1. We can use G-Code to move the machine around! By default, the machine will use millimeter for its units. To move to the (x, y, z) position (100mm, 50mm, 200mm) using G-Code, we can use the command:\nG1 X100 Y50 Z200 ; move the the position (100, 50, 200)\nwhere G1 is the command for a ‘linear move’. Everything after the semicolon is a comment and is ignored by the machine. We could also set a speed to move at using an F parameter:\n1 2 G1 X100 Y50 Z200 F6000 ; move the the position (100, 50, 200) ; at a speed of 6000 mm/min` The F parameter sets the feedrate, or speed, to move. Of course, these settings are subject to the physical realities. If your machine is only 300mm tall, then sending a G1 Z500 will only move to a height of 300. Similarly, the machine might not be able to move as fast as you tell it to. G-Code is used in tandem with M-Codes (or ‘miscellaneous codes’) which control non-movement related functions. For example, the command M203 will set the maximum speed which each axis can move.\nDifferent machines might use slightly different sets (or \u0026lsquo;flavors\u0026rsquo;) of GCode. This depends on the control board which the machine uses (which turns G-Code commands into machine movements) and the firmware which the control board uses. p5.fab works with any machine running Marlin firmware. This is the firmware that many companies (e.g. Creality, Prusa, Ultimaker) use on their machines, as well as various custom/open-source machines. For a complete list of G and M Codes supported on Marline, check out the G-Code Dictionary.\nAlready, you might see how tedious it would be to plan movements using GCode directly. p5.fab lets you use Javascript code to build up many commands.\nCoordinate Systems # To send the machine to a position to move to, the machine has to know where it is. This is accomplished by ‘homing’ the machine when you first power it on. Most machines have 3 dimensional axes (X, Y, \u0026amp; Z). Other machines might have more; a 3D printer also has an extruder, or E axis which tracks how much filament is being extruded.\nOur G-Code movement commands can be interpreted as absolute or relative moves by the machine. In absolute positioning mode, the machine will move relative to the origin. In relative positioning mode, the machine will move relative to its last position. We can change our positioning mode using G-Codes: G90 to use absolute positions and G91 for relative. For example, say we start at the origin (0,0,0). Consider the following move commands:\n1 2 3 4 5 ; to start, we are at the origin (0,0,0) G90 ; use absolute positioning G1 X100 Y50 Z200 ; move to the absolute position (100, 50, 200) G91 ; use relative positioning G1 X100 ; move 100mm in X relative to the last position In this example, the machine will end up at the position (200, 50, 200). Note that all subsequent commands will be in relative mode unless we explicitly return to absolute mode with a G90 command.\nThere are others, too! These are often machine-specific. For example, the popular AxiDraw pen plotter uses the EBB command set, or the ShopBot CNC machines uses SBP codes.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":1,"href":"/docs/quickstart/","title":"Quickstart","section":"Docs","content":" p5.fab Quickstart # Here are a couple of ways to get started with p5.fab.\nOnline Editor # Using Chrome1, open the online editor. Design your artifact! You can start from one of the examples; try changing some of the values in the sketch to see what happens to the resulting object. Physically connect your computer to your fabrication machine2 with a USB cable and click \u0026lsquo;Connect\u0026rsquo;. Start making! Press \u0026lsquo;Print\u0026rsquo; to start streaming commands to your machine. Be sure to keep an eye out for anything that goes wrong; there\u0026rsquo;s no guarantee that your code will \u0026lsquo;work\u0026rsquo; in any conventional sense, but that\u0026rsquo;s part of the fun! Alternative Option: Local Installation # If you\u0026rsquo;d like to use your preferred code editor while using p5.fab:\nDownload the p5.fab.js library file and add the path to the \u0026lt;head\u0026gt; tag of your index.html file:\n\u0026lt;script src=\u0026quot;p5.fab.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nYou should also add it\u0026rsquo;s dependencies, the p5.js library and the webserial communication:\n\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/p5@1.9.2/lib/p5.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/p5-webserial@0.1.1/build/p5.webserial.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Run a local server; this is required for communicating between the machine and your computer. See this guide for details on how to do this!\nOpen your sketch in Chrome1 and start making!\nWe use serial communication to communicate with the machine; Chrome is the only browser which supports WebSerial, which let\u0026rsquo;s us get up and running even quicker!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCheck out the Machine Compatability Page for more information on what machines are currently supported.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":2,"href":"/docs/resources/guides/cc-intro/","title":"A Gentle Introduction to Creative Coding with p5.js","section":"Resources","content":" A Gentle Introduction to Creative Coding with p5.js # This page provides a brief introduction to some key concepts for creative coding with p5.js. It is by no means exhaustive, but provides helpful background information for newcomers to dicreative code. If you’re already familiar with computer-controlled machines but want to learn a bit about digital fabrication, check out the digital fabrication intro, or if you want to learn how to make things with p5.fab, jump ahead to the primer.\nWhat is Creative Code? # Creative code is broadly the practice of programming for expressive rather than functional purposes. There are many different creative coding libraries/frameworks/toolkits; some popular ones are p5.js, Processing, and OpenFrameworks. Different tools are surrounded by vibrant communities artists, designers, engineers, tinkerers, and anyone else who is interested in coding for the visual arts. p5.fab is built specifically to work with p5.js.\nAnatomy of a Sketch # In progress.\nGoing Further # In progress.\n"},{"id":3,"href":"/docs/machine-compatibility/","title":"Machine Compatibility","section":"Docs","content":" Machine Compatibility # p5.fab is intended to be used with physical machines! In general, it should work with any machine running Marlin firmware. This is the firmware that many companies (e.g. Creality, Prusa, Ultimaker) use, as well as various custom/open-source machines. For more background on machine firmwares, check out the digital fabrication intro. We\u0026rsquo;ve tested p5.fab on the following machines:\nMachine Info Creality Ender3 3D Printer Prusa i3-mk3 3D Printer FLSUN Q9 Delta 3D Printer Potterbot 9 Ceramic 3D Printer Jubilee Toolchanging Machine While most of these are 3D printers, we are working on extending control to Plotters (like the AxiDraw) and CNC machines (like the Othermill). Stay tuned!\n"},{"id":4,"href":"/docs/resources/guides/p5fab-primer/","title":"p5.fab Primer","section":"Resources","content":" p5.fab Primer # This page provides an introduction to using p5.fab. If you’re new to digital fabrication and/or creative code and want some more context for the information presented here, check out the digital fabrication and creative coding introductions.\nThe fabDraw Function # p5.fab adds to the default setup() and draw() functions a fabDraw() function. fabDraw() is run once, immediately after setup and before the first draw loop:\n1 2 3 4 5 6 7 8 9 10 11 function setup() { // your normal setup goes gere } function fabDraw() { // fabDraw will be run immediately after the setup function } function draw() { // the draw loop will run continually as usual } The fab Object # Moving, Grooving, and Extruding # Toolpath Visualization # Tuning Toolpath Parameters # Next Steps # "},{"id":5,"href":"/docs/resources/tutorials/cube-tutorial/","title":"Cube Tutorial","section":"Resources","content":" p5.fab Quickstart # Here are a couple of ways to get started with p5.fab.\nOnline Editor # Using Chrome1, open the online editor. Design your artifact! You can start from one of the examples; try changing some of the values in the sketch to see what happens to the resulting object. Physically connect your computer to your fabrication machine2 with a USB cable and click \u0026lsquo;Connect\u0026rsquo;. Start making! Press \u0026lsquo;Print\u0026rsquo; to start streaming commands to your machine. Be sure to keep an eye out for anything that goes wrong; there\u0026rsquo;s no guarantee that your code will \u0026lsquo;work\u0026rsquo; in any conventional sense, but that\u0026rsquo;s part of the fun! Alternative Option: Local Installation # If you\u0026rsquo;d like to use your preferred code editor while using p5.fab:\nDownload the p5.fab.js library file and add the path to the \u0026lt;head\u0026gt; tag of your index.html file:\n\u0026lt;script src=\u0026quot;p5.fab.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nYou should also add it\u0026rsquo;s dependencies, the p5.js library and the webserial communication:\n\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/p5@1.9.2/lib/p5.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/p5-webserial@0.1.1/build/p5.webserial.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Run a local server; this is required for communicating between the machine and your computer. See this guide for details on how to do this!\nOpen your sketch in Chrome1 and start making!\nWe use serial communication to communicate with the machine; Chrome is the only browser which supports WebSerial, which let\u0026rsquo;s us get up and running even quicker!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCheck out the Machine Compatability Page for more information on what machines are currently supported.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":6,"href":"/docs/resources/tutorials/non-planar-tutorial/","title":"Non-Planar Printing Tutorial","section":"Resources","content":" p5.fab Quickstart # Here are a couple of ways to get started with p5.fab.\nOnline Editor # Using Chrome1, open the online editor. Design your artifact! You can start from one of the examples; try changing some of the values in the sketch to see what happens to the resulting object. Physically connect your computer to your fabrication machine2 with a USB cable and click \u0026lsquo;Connect\u0026rsquo;. Start making! Press \u0026lsquo;Print\u0026rsquo; to start streaming commands to your machine. Be sure to keep an eye out for anything that goes wrong; there\u0026rsquo;s no guarantee that your code will \u0026lsquo;work\u0026rsquo; in any conventional sense, but that\u0026rsquo;s part of the fun! Alternative Option: Local Installation # If you\u0026rsquo;d like to use your preferred code editor while using p5.fab:\nDownload the p5.fab.js library file and add the path to the \u0026lt;head\u0026gt; tag of your index.html file:\n\u0026lt;script src=\u0026quot;p5.fab.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nYou should also add it\u0026rsquo;s dependencies, the p5.js library and the webserial communication:\n\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/p5@1.9.2/lib/p5.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/p5-webserial@0.1.1/build/p5.webserial.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Run a local server; this is required for communicating between the machine and your computer. See this guide for details on how to do this!\nOpen your sketch in Chrome1 and start making!\nWe use serial communication to communicate with the machine; Chrome is the only browser which supports WebSerial, which let\u0026rsquo;s us get up and running even quicker!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCheck out the Machine Compatability Page for more information on what machines are currently supported.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":7,"href":"/docs/resources/","title":"Resources","section":"Docs","content":" Resources # Here you\u0026rsquo;ll find some resources for using p5.fab, including guides which introduce key concepts, tutorials which put these concepts into practice, and examples to motivate more uses!\nThe resources here are growing; if there\u0026rsquo;s something you\u0026rsquo;d like to see added or contribute, reach out on github!\nGuides # A Gentle Introduction to Digital Fabrication # A (very!) brief overview of some key digital fabrication concepts, including: G-Code, coordinate systems, machines, and their firmware. Intended for anyone new to using machines like 3D printers.\nA Gentle Introduction to Creative Coding with p5.js # A (very!) brief overview of some key creative coding concepts, including: how to sketch with p5.js. Intended for anyone new to creative coding.\np5.fab Primer # An overview of the p5.fab library!\nTutorials # Printing a cube # A first 3D printed object with p5.fab!\nNon-Planar 3D Printing # Putting the \u0026lsquo;3D\u0026rsquo; in 3D printing.\nLine Vase 3D Print # Tuning printing parameters to create delicate structures.\nExamples # more examples to come!\n"},{"id":8,"href":"/docs/resources/tutorials/line-vase-tutorial/","title":"Line Vase Tutorial","section":"Resources","content":" p5.fab Quickstart # Here are a couple of ways to get started with p5.fab.\nOnline Editor # Using Chrome1, open the online editor. Design your artifact! You can start from one of the examples; try changing some of the values in the sketch to see what happens to the resulting object. Physically connect your computer to your fabrication machine2 with a USB cable and click \u0026lsquo;Connect\u0026rsquo;. Start making! Press \u0026lsquo;Print\u0026rsquo; to start streaming commands to your machine. Be sure to keep an eye out for anything that goes wrong; there\u0026rsquo;s no guarantee that your code will \u0026lsquo;work\u0026rsquo; in any conventional sense, but that\u0026rsquo;s part of the fun! Alternative Option: Local Installation # If you\u0026rsquo;d like to use your preferred code editor while using p5.fab:\nDownload the p5.fab.js library file and add the path to the \u0026lt;head\u0026gt; tag of your index.html file:\n\u0026lt;script src=\u0026quot;p5.fab.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nYou should also add it\u0026rsquo;s dependencies, the p5.js library and the webserial communication:\n\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/p5@1.9.2/lib/p5.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/p5-webserial@0.1.1/build/p5.webserial.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Run a local server; this is required for communicating between the machine and your computer. See this guide for details on how to do this!\nOpen your sketch in Chrome1 and start making!\nWe use serial communication to communicate with the machine; Chrome is the only browser which supports WebSerial, which let\u0026rsquo;s us get up and running even quicker!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCheck out the Machine Compatability Page for more information on what machines are currently supported.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"}]